version: "3.9"

services:
  explorer:
    build:
      dockerfile: Dockerfile
      context: .
      target: final
    restart: on-failure
    networks:
      - database
    ports:
      - "44333:80"
    environment:
      DATABASE_HOST: database
      DATABASE_PORT: 5432
      DATABASE_PASSWORD: super
      DATABASE_USER: postgres
      DATABASE_SCHEMA: explorer
    depends_on:
      - database

  database:
    image: postgres:13
    restart: always
    networks:
      - database
    environment:
      POSTGRES_PASSWORD: super
      POSTGRES_USER: postgres
      POSTGRES_DB: explorer
    volumes:
      - type: volume
        source: database-data
        target: /var/lib/postgresql/data
      - type: bind
        source: init.sql
        target: /tmp/explorer-init.sql
    ports:
      - "5432:5432"

  tours:
    # build: ../tours/
    image: tours
    restart: on-failure
    networks:
      - database
    ports:
      - "8000:88"
    environment:
      DATABASE_HOST: database
      DATABASE_PORT: 5432
      DATABASE_PASSWORD: super
      DATABASE_USER: postgres
      DATABASE_SCHEMA: explorer
    depends_on:
      - explorer
      - database

  stakeholders:
    build: ../stakeholders/
    image: stakeholders
    restart: always
    ports:
      - "8082:8082"
    environment:
      DATABASE_URL: "host=stakeholdersdb user=postgres password=super dbname=SOA sslmode=disable"
      STAKEHOLDERS_SERVICE_ADDRESS: ${STAKEHOLDERS_SERVICE_ADDRESS}
    networks:
      - database
    depends_on:
      - stakeholdersdb

  stakeholdersdb:
    image: postgres
    container_name: stakeholders-database
    networks:
      - database
    ports:
      - 5435:5432
    environment:
      - POSTGRES_DB=SOA
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=super
    volumes:
      - stakeholders-data:/var/lib/postgresql/data

  followers:
    # build: ../follower/
    image: followers
    restart: on-failure
    networks:
      - database
    ports:
      - "89:89"
    environment:
      - NEO4J_DB=bolt://neo4j:7687
      - NEO4J_USERNAME=neo4j
      - NEO4J_PASS=nekaSifra
    depends_on:
      neo4j:
        condition: service_healthy

  neo4j:
    image: neo4j
    restart: always
    networks:
      - database
    ports:
      - "7687:7687"
      - "7474:7474"
      - "7473:7473"
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "echo RETURN 1 | cypher-shell -a bolt://neo4j:7687 -u neo4j -p nekaSifra || exit 1",
        ]
      interval: 5s
      timeout: 5s
      retries: 10
    environment:
      - NEO4J_AUTH=neo4j/nekaSifra
    volumes:
      - neo4j_data:/data

  api_gateway:
    image: api_gateway
    container_name: api_gateway
    hostname: api_gateway
    build:
      context: /api-gateway
      dockerfile: Dockerfile
    restart: always
    environment:
      STAKEHOLDERS_SERVICE_ADDRESS: stakeholders:8082
      GATEWAY_ADDRESS: ${GATEWAY_ADDRESS}
      FOLLOWERS_SERVICE_ADDRESS: ${FOLLOWERS_SERVICE_ADDRESS}
    depends_on:
      - stakeholders
    networks:
      - database
    ports:
      - "8001:8001"

volumes:
  database-data:
    name: explorer
  neo4j_data:
  stakeholders-data:
    driver: local
    name: stakeholders-data

networks:
  database:
    name: database
    driver: bridge
